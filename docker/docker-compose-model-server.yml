name: ml_server
services:
  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - production_net

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=1234
    ports:
      - 5672:5672
      - 15672:15672
    # volumes:
    #   - rabbitmq_data:/var/lib/rabbitmq

  fastapi_server:
    build:
      context: ../model_server/
      dockerfile: Dockerfile
    container_name: fastapi_server
    command: "fastapi run --host 0.0.0.0 --port 80 /app/main.py"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "5000:80"
    expose:
      - "5000"
    # Mapping the Model from Object storage inside the docker conatiner
    volumes:
      - /mnt/object/inference_data:/app/model_objects
    environment:
      - DEBUG=False
      - USE_MODEL=False
      - MODEL_PATH=/app/model_objects/model.pth
      - MODEL_CONFIG_PATH=/app/model_objects/model_config.json
      - USER_PLAYLIST_PATH=/app/model_objects/user_to_neighboursPlaylists.pkl
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    networks:
      - production_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - /mnt/block/prometheus_data:/prometheus
    # command:
      # - --config.file=/etc/prometheus/prometheus.yaml
      # - --storage.tsdb.path=/prometheus
      # - --web.enable-lifecycle
    networks:
      - production_net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    build:
      context: ../model_monitoring/grafana/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - /mnt/block/grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    command:
      - "--homepath=/usr/share/grafana"
      - "--config=/etc/grafana/grafana.ini"
    networks:
      - production_net

  client:
    build:
      context: ../client_app_sample/
      dockerfile: Dockerfile
    container_name: client_server
    command: "fastapi run --host 0.0.0.0 --port 80 /app/main.py"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5000:80"
    expose:
      - "5000"
    environment:
      - DEBUG=False
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started
    networks:
      - production_net

networks:
  production_net:
    external: true