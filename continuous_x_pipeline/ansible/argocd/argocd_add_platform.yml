---
- name: Deploy MLflow platform, Prometheus, Grafana, Redis, FastAPI & Airflow via ArgoCD
  hosts: node1
  become: yes
  vars:
    argocd_username:    "admin"
    repo_path:          "https://github.com/AguLeon/MLOps_G47_SpotifyBuddies.git"

    # MLflow
    app_name:           "spotifybuddies-platform"
    app_path:           "continuous_x_pipeline/k8s/platform"
    minio_access_key:   "your-access-key"

    # Monitoring
    prom_app:           "spotifybuddies-prometheus"
    prom_path:          "continuous_x_pipeline/k8s/monitoring/prometheus"
    graf_app:           "spotifybuddies-grafana"
    graf_path:          "continuous_x_pipeline/k8s/monitoring/grafana"
    prom_nodeport:      "{{ external_port_prom }}"
    graf_nodeport:      "{{ external_port_graf }}"
    grafana_admin_pw:   "grafana-admin"

    # Extra services
    redis_app:          "spotifybuddies-redis"
    redis_path:         "continuous_x_pipeline/k8s/monitoring/redis"
    fastapi_app:        "spotifybuddies-fastapi"
    fastapi_path:       "continuous_x_pipeline/k8s/platform/fastapi"
    airflow_app:        "spotifybuddies-airflow"
    airflow_path:       "continuous_x_pipeline/k8s/monitoring/airflow"

    external_port_prom: "9090"
    external_port_graf: "3000"

  tasks:
    - name: Get ArgoCD admin password
      command: >
        kubectl get secret argocd-initial-admin-secret
          -n argocd
          -o jsonpath="{.data.password}"
      register: argocd_password_base64

    - name: Decode ArgoCD password
      shell: echo {{ argocd_password_base64.stdout }} | base64 --decode
      register: argocd_password

    - name: Log in to ArgoCD
      command: >
        argocd login localhost
          --username {{ argocd_username }}
          --password "{{ argocd_password.stdout }}"
          --grpc-web
          --port-forward
          --port-forward-namespace=argocd
      changed_when: false

    - name: Add Git repo to ArgoCD (once)
      delegate_to: localhost
      run_once: true
      command: >
        argocd repo add {{ repo_path }}
          --port-forward
          --port-forward-namespace=argocd
      changed_when: "'already exists' not in repo_result.stderr"

    - name: Detect external IP
      set_fact:
        external_ip: "{{ ansible_all_ipv4_addresses
          | select('match','^10\\.56\\..*')
          | list | first }}"

    - debug:
        msg: |
          external_ip = {{ external_ip }}
          prom_nodeport = {{ prom_nodeport }}
          graf_nodeport = {{ graf_nodeport }}

    # ── MLflow Platform ─────────────────────────────────────────────────────────
    - name: Ensure spotifybuddies-platform ns exists
      command: kubectl get namespace spotifybuddies-platform
      register: ns_check_plat
      failed_when: false
      changed_when: false

    - name: Create spotifybuddies-platform ns
      when: ns_check_plat.rc != 0
      command: kubectl create namespace spotifybuddies-platform

    - name: Check MLflow app
      command: >
        argocd app get {{ app_name }}
          --port-forward
          --port-forward-namespace=argocd
      register: plat_check
      failed_when: false
      changed_when: false

    - name: Create MLflow app
      when: plat_check.rc != 0
      command: >
        argocd app create {{ app_name }}
          --repo {{ repo_path }}
          --path {{ app_path }}
          --dest-server https://kubernetes.default.svc
          --dest-namespace spotifybuddies-platform
          --helm-set-string minio.externalIP={{ external_ip }}
          --helm-set-string mlflow.externalIP={{ external_ip }}
          --port-forward
          --port-forward-namespace=argocd
          --sync-policy automated --self-heal

    - name: Update MLflow app
      when: plat_check.rc == 0
      command: >
        argocd app set {{ app_name }}
          --helm-set-string minio.externalIP={{ external_ip }}
          --helm-set-string mlflow.externalIP={{ external_ip }}
          --dest-namespace spotifybuddies-platform
          --port-forward
          --port-forward-namespace=argocd

    # ── Monitoring Namespace ────────────────────────────────────────────────────
    - name: Ensure spotifybuddies-monitoring ns exists
      command: kubectl get namespace spotifybuddies-monitoring
      register: ns_check_mon
      failed_when: false
      changed_when: false

    - name: Create spotifybuddies-monitoring ns
      when: ns_check_mon.rc != 0
      command: kubectl create namespace spotifybuddies-monitoring

    # Prometheus
    - name: Check Prometheus app
      command: >
        argocd app get {{ prom_app }}
          --port-forward
          --port-forward-namespace=argocd
      register: prom_check
      failed_when: false
      changed_when: false

    - name: Create Prometheus app
      when: prom_check.rc != 0
      command: >
        argocd app create {{ prom_app }}
          --repo {{ repo_path }}
          --path {{ prom_path }}
          --dest-server https://kubernetes.default.svc
          --dest-namespace spotifybuddies-monitoring
          --helm-set-string server.service.type=NodePort
          --helm-set-string server.service.nodePort={{ prom_nodeport }}
          --port-forward
          --port-forward-namespace=argocd
          --sync-policy automated --self-heal

    - name: Update Prometheus app
      when: prom_check.rc == 0
      command: >
        argocd app set {{ prom_app }}
          --helm-set-string server.service.nodePort={{ prom_nodeport }}
          --port-forward
          --port-forward-namespace=argocd

    # Grafana
    - name: Check Grafana app
      command: >
        argocd app get {{ graf_app }}
          --port-forward
          --port-forward-namespace=argocd
      register: graf_check
      failed_when: false
      changed_when: false

    - name: Create Grafana app
      when: graf_check.rc != 0
      command: >
        argocd app create {{ graf_app }}
          --repo {{ repo_path }}
          --path {{ graf_path }}
          --dest-server https://kubernetes.default.svc
          --dest-namespace spotifybuddies-monitoring
          --helm-set-string service.type=NodePort
          --helm-set-string service.nodePort={{ graf_nodeport }}
          --helm-set-string adminPassword={{ grafana_admin_pw }}
          --port-forward
          --port-forward-namespace=argocd
          --sync-policy automated --self-heal

    - name: Update Grafana app
      when: graf_check.rc == 0
      command: >
        argocd app set {{ graf_app }}
          --helm-set-string service.nodePort={{ graf_nodeport }}
          --helm-set-string adminPassword={{ grafana_admin_pw }}
          --port-forward
          --port-forward-namespace=argocd

    # ── Redis ──────────────────────────────────────────────────────────────────
    - name: Check Redis app
      command: >
        argocd app get {{ redis_app }}
          --port-forward
          --port-forward-namespace=argocd
      register: redis_check
      failed_when: false
      changed_when: false

    - name: Create Redis app
      when: redis_check.rc != 0
      command: >
        argocd app create {{ redis_app }}
          --repo {{ repo_path }}
          --path {{ redis_path }}
          --dest-server https://kubernetes.default.svc
          --dest-namespace spotifybuddies-monitoring
          --sync-policy automated --self-heal
      register: redis_create

    - name: Update Redis app
      when: redis_check.rc == 0
      command: >
        argocd app set {{ redis_app }}
          --sync-policy automated --self-heal

    # ── FastAPI ───────────────────────────────────────────────────────────────
    - name: Check FastAPI app
      command: >
        argocd app get {{ fastapi_app }}
          --port-forward
          --port-forward-namespace=argocd
      register: fastapi_check
      failed_when: false
      changed_when: false

    - name: Create FastAPI app
      when: fastapi_check.rc != 0
      command: >
        argocd app create {{ fastapi_app }}
          --repo {{ repo_path }}
          --path {{ fastapi_path }}
          --dest-server https://kubernetes.default.svc
          --dest-namespace spotifybuddies-platform
          --port-forward
          --port-forward-namespace=argocd
          --sync-policy automated --self-heal

    - name: Update FastAPI app
      when: fastapi_check.rc == 0
      command: >
        argocd app set {{ fastapi_app }}
          --sync-policy automated --self-heal

    # ── Airflow ───────────────────────────────────────────────────────────────
    - name: Check Airflow app
      command: >
        argocd app get {{ airflow_app }}
          --port-forward
          --port-forward-namespace=argocd
      register: airflow_check
      failed_when: false
      changed_when: false

    - name: Create Airflow app
      when: airflow_check.rc != 0
      command: >
        argocd app create {{ airflow_app }}
          --repo {{ repo_path }}
          --path {{ airflow_path }}
          --dest-server https://kubernetes.default.svc
          --dest-namespace spotifybuddies-monitoring
          --sync-policy automated --self-heal

    - name: Update Airflow app
      when: airflow_check.rc == 0
      command: >
        argocd app set {{ airflow_app }}
          --sync-policy automated --self-heal
