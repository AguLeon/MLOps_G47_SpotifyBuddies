---
- name: Install ArgoCD CLI on node1
  hosts: node1
  become: yes
  tasks:
    - name: Download argocd binary
      get_url:
        url: https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        dest: /usr/local/bin/argocd
        mode: '0755'

- name: Ensure node1 can resolve external domains
  hosts: node1
  become: yes
  tasks:
    - name: Add public DNS servers to /etc/resolv.conf
      lineinfile:
        dest: /etc/resolv.conf
        regexp: '^nameserver'
        insertafter: BOF
        line: 'nameserver 8.8.8.8'
        state: present

    - name: Add Cloudflare DNS server to /etc/resolv.conf
      lineinfile:
        dest: /etc/resolv.conf
        regexp: '^nameserver 1\.1\.1\.1'
        insertafter: '^nameserver 8\.8\.8\.8'
        line: 'nameserver 1.1.1.1'
        state: present

- name: Deploy MLflow platform via ArgoCD & Helm with MinIO secret handling
  hosts: node1
  become: yes
  vars:
    argocd_username: "admin"
    repo_path: "https://github.com/AguLeon/MLOps_G47_SpotifyBuddies.git"
    app_name: "spotifybuddies-platform"
    app_path: "continuous_x_pipeline/k8s/platform"
    minio_access_key: "your-access-key"

    prom_app: "spotifybuddies-prometheus"
    prom_path: "continuous_x_pipeline/k8s/monitoring/prometheus"
    graf_app: "spotifybuddies-grafana"
    graf_path: "continuous_x_pipeline/k8s/monitoring/grafana"

    prom_nodeport: "9090"
    graf_nodeport: "3000"

    grafana_admin_pw: "grafana-admin"

  tasks:
    - name: Get ArgoCD admin password from Kubernetes secret
      command: >
        kubectl get secret -n argocd argocd-initial-admin-secret \
        -o jsonpath="{.data.password}"
      register: argocd_password_base64

    - name: Decode ArgoCD admin password
      shell: echo {{ argocd_password_base64.stdout }} | base64 --decode
      register: argocd_password

    - name: Log in to ArgoCD
      command: >
        argocd login localhost --username {{ argocd_username }} \
        --password "{{ argocd_password.stdout }}" --grpc-web --port-forward --port-forward-namespace=argocd
      register: login_result
      changed_when: false

    - name: Add repository to ArgoCD
      command: >
        argocd repo add {{ repo_path }} --port-forward --port-forward-namespace=argocd
      register: repo_result
      changed_when: "'Repository already exists' not in repo_result.stderr"

    - name: Detect external IP starting with 10.56
      set_fact:
        external_ip: "{{ ansible_all_ipv4_addresses | select('match', '^10\\.56\\..*') | list | first }}"

    - name: Ensure spotifybuddies-platform namespace exists
      command: kubectl get namespace spotifybuddies-platform
      register: ns_check
      failed_when: false
      changed_when: false

    - name: Create spotifybuddies-platform namespace if missing
      when: ns_check.rc != 0
      command: kubectl create namespace spotifybuddies-platform

    - name: Check if MinIO secret already exists
      command: kubectl get secret minio-credentials -n spotifybuddies-platform
      register: minio_secret_check
      failed_when: false
      changed_when: false

    - name: Generate MinIO secret key
      when: minio_secret_check.rc != 0
      set_fact:
        minio_secret_key: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"

    - name: Create MinIO credentials secret
      when: minio_secret_check.rc != 0
      command: >
        kubectl create secret generic minio-credentials
        --namespace spotifybuddies-platform
        --from-literal=accesskey={{ minio_access_key }}
        --from-literal=secretkey={{ minio_secret_key }}
      register: minio_secret_create

    - name: Get existing MinIO secret key if already exists
      when: minio_secret_check.rc == 0
      command: >
        kubectl get secret minio-credentials -n spotifybuddies-platform -o jsonpath="{.data.secretkey}"
      register: existing_secret_b64

    - name: Decode existing MinIO secret key
      when: minio_secret_check.rc == 0
      set_fact:
        minio_secret_key: "{{ existing_secret_b64.stdout | b64decode }}"

    - name: Check if ArgoCD application exists
      command: >
        argocd app get {{ app_name }} --port-forward --port-forward-namespace=argocd
      register: app_check
      failed_when: false
      changed_when: false

    - name: Create ArgoCD Helm application if it does not exist
      when: app_check.rc != 0
      command: >
        argocd app create {{ app_name }} \
        --repo {{ repo_path }} \
        --path {{ app_path }} \
        --dest-server https://kubernetes.default.svc \
        --dest-namespace spotifybuddies-platform \
        --helm-set-string minio.externalIP={{ external_ip }} \
        --helm-set-string mlflow.externalIP={{ external_ip }} \
        --port-forward --port-forward-namespace=argocd \
        --sync-policy automated --self-heal
      register: app_create

    - name: Update ArgoCD Helm application if it exists
      when: app_check.rc == 0
      command: >
        argocd app set {{ app_name }} \
        --dest-namespace spotifybuddies-platform \
        --helm-set-string minio.externalIP={{ external_ip }} \
        --helm-set-string mlflow.externalIP={{ external_ip }} \
        --port-forward --port-forward-namespace=argocd
      register: app_update

    - name: Display MinIO credentials
      debug:
        msg: |
          MinIO Access Key: {{ minio_access_key }}
          MinIO Secret Key: {{ minio_secret_key }}

    - name: Ensure spotifybuddies-monitoring namespace exists
      command: kubectl get namespace spotifybuddies-monitoring
      register: mon_ns_check
      failed_when: false
      changed_when: false

    - name: Create namespace if missing
      when: mon_ns_check.rc != 0
      command: kubectl create namespace spotifybuddies-monitoring

    - name: Check Prometheus app
      command: argocd app get {{ prom_app }} --port-forward --port-forward-namespace=argocd
      register: prom_check
      failed_when: false
      changed_when: false

    - name: Create Prometheus app (if missing)
      when: prom_check.rc != 0
      command: >
        argocd app create {{ prom_app }} \
          --repo {{ repo_path }} \
          --path {{ prom_path }} \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace spotifybuddies-monitoring \
          --helm-set-string server.service.type=NodePort \
          --helm-set-string server.service.nodePort={{ prom_nodeport }} \
          --port-forward --port-forward-namespace=argocd \
          --sync-policy automated --self-heal

    - name: Update Prometheus app (if present)
      when: prom_check.rc == 0
      command: >
        argocd app set {{ prom_app }} \
          --helm-set-string server.service.nodePort={{ prom_nodeport }} \
          --port-forward --port-forward-namespace=argocd

    - name: Check Grafana app
      command: argocd app get {{ graf_app }} --port-forward --port-forward-namespace=argocd
      register: graf_check
      failed_when: false
      changed_when: false

    - name: Create Grafana app (if missing)
      when: graf_check.rc != 0
      command: >
        argocd app create {{ graf_app }} \
          --repo {{ repo_path }} \
          --path {{ graf_path }} \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace spotifybuddies-monitoring \
          --helm-set-string service.type=NodePort \
          --helm-set-string service.nodePort={{ graf_nodeport }} \
          --helm-set-string adminPassword={{ grafana_admin_pw }} \
          --port-forward --port-forward-namespace=argocd \
          --sync-policy automated --self-heal

    - name: Update Grafana app (if present)
      when: graf_check.rc == 0
      command: >
        argocd app set {{ graf_app }} \
          --helm-set-string service.nodePort={{ graf_nodeport }} \
          --helm-set-string adminPassword={{ grafana_admin_pw }} \
          --port-forward --port-forward-namespace=argocd

